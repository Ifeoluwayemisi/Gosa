generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model activitylog {
  id        Int      @id @default(autoincrement())
  userId    Int?
  action    String
  metadata  Json?
  createdAt DateTime @default(now())
  user      user?    @relation(fields: [userId], references: [id], map: "ActivityLog_userId_fkey")

  @@index([userId], map: "ActivityLog_userId_fkey")
}

model address {
  id        Int     @id @default(autoincrement())
  userId    Int
  fullName  String?
  phone     String?
  street    String
  city      String
  state     String
  country   String
  postal    String
  isDefault Boolean @default(false)
  isDeleted Boolean @default(false)
  label     String?
  user      user    @relation(fields: [userId], references: [id], map: "Address_userId_fkey")

  @@index([userId], map: "Address_userId_fkey")
}

model cart {
  id        Int        @id @default(autoincrement())
  userId    Int
  createdAt DateTime   @default(now())
  updatedAt DateTime
  isDeleted Boolean    @default(false)
  user      user       @relation(fields: [userId], references: [id], map: "Cart_userId_fkey")
  cartitem  cartitem[]

  @@index([userId], map: "Cart_userId_fkey")
}

model cartitem {
  id        Int     @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int
  isDeleted Boolean @default(false)
  discount  Float   @default(0)
  shipping  Float   @default(0)
  subtotal  Float
  tax       Float   @default(0)
  variantId Int
  cart      cart    @relation(fields: [cartId], references: [id], map: "CartItem_cartId_fkey")
  product   product @relation(fields: [productId], references: [id], map: "CartItem_productId_fkey")
  variant   variant @relation(fields: [variantId], references: [id], map: "CartItem_variantId_fkey")

  @@index([cartId], map: "CartItem_cartId_fkey")
  @@index([productId], map: "CartItem_productId_fkey")
  @@index([variantId], map: "CartItem_variantId_fkey")
}

model category {
  id             Int              @id @default(autoincrement())
  name           String           @unique(map: "Category_name_key")
  isDeleted      Boolean          @default(false)
  couponcategory couponcategory[]
  products       product[]
}

model coupon {
  id               Int                 @id @default(autoincrement())
  code             String              @unique(map: "Coupon_code_key")
  discountType     coupon_discountType
  value            Float
  expiresAt        DateTime
  isActive         Boolean             @default(true)
  minOrders        Int                 @default(0)
  usageLimit       Int?
  perUserLimit     Int?
  productLimit     Int?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime
  isDeleted        Boolean             @default(false)
  stackable        Boolean             @default(false)
  type             coupon_type         @default(ADMIN)
  couponcategory   couponcategory[]
  couponproduct    couponproduct[]
  couponredemption couponredemption[]
}

model couponcategory {
  id         Int      @id @default(autoincrement())
  couponId   Int
  categoryId Int
  category   category @relation(fields: [categoryId], references: [id], map: "CouponCategory_categoryId_fkey")
  coupon     coupon   @relation(fields: [couponId], references: [id], map: "CouponCategory_couponId_fkey")

  @@index([categoryId], map: "CouponCategory_categoryId_fkey")
  @@index([couponId], map: "CouponCategory_couponId_fkey")
}

model couponproduct {
  id        Int     @id @default(autoincrement())
  couponId  Int
  productId Int
  coupon    coupon  @relation(fields: [couponId], references: [id], map: "CouponProduct_couponId_fkey")
  products  product @relation(fields: [productId], references: [id], map: "CouponProduct_productId_fkey")

  @@index([couponId], map: "CouponProduct_couponId_fkey")
  @@index([productId], map: "CouponProduct_productId_fkey")
}

model couponredemption {
  id         Int      @id @default(autoincrement())
  couponId   Int
  userId     Int
  orderId    Int
  redeemedAt DateTime @default(now())
  coupon     coupon   @relation(fields: [couponId], references: [id], map: "CouponRedemption_couponId_fkey")
  order      order    @relation(fields: [orderId], references: [id], map: "CouponRedemption_orderId_fkey")
  user       user     @relation(fields: [userId], references: [id], map: "CouponRedemption_userId_fkey")

  @@index([couponId], map: "CouponRedemption_couponId_fkey")
  @@index([orderId], map: "CouponRedemption_orderId_fkey")
  @@index([userId], map: "CouponRedemption_userId_fkey")
}

model customization {
  id        Int      @id @default(autoincrement())
  productId Int
  userId    Int
  options   Json
  createdAt DateTime @default(now())
  isDeleted Boolean  @default(false)
  product   product  @relation(fields: [productId], references: [id], map: "Customization_productId_fkey")
  user      user     @relation(fields: [userId], references: [id], map: "Customization_userId_fkey")

  @@index([productId], map: "Customization_productId_fkey")
  @@index([userId], map: "Customization_userId_fkey")
}

model notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  title     String
  message   String
  type      String   @default("info")
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      user     @relation(fields: [userId], references: [id], map: "Notification_userId_fkey")

  @@index([userId], map: "Notification_userId_fkey")
}

model order {
  id               Int                @id @default(autoincrement())
  userId           Int
  status           order_status       @default(PENDING)
  total            Float
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  discount         Float              @default(0)
  isDeleted        Boolean            @default(false)
  shipping         Float              @default(0)
  shippingAddress  Json
  subtotal         Float
  tax              Float              @default(0)
  couponredemption couponredemption[]
  user             user               @relation(fields: [userId], references: [id], map: "Order_userId_fkey")
  orderitem        orderitem[]
  payment          payment[]

  @@index([userId], map: "Order_userId_fkey")
}

model orderitem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float
  isDeleted Boolean @default(false)
  variantId Int
  order     order   @relation(fields: [orderId], references: [id], map: "OrderItem_orderId_fkey")
  products  product @relation(fields: [productId], references: [id], map: "OrderItem_productId_fkey")
  variant   variant @relation(fields: [variantId], references: [id], map: "OrderItem_variantId_fkey")

  @@index([orderId], map: "OrderItem_orderId_fkey")
  @@index([productId], map: "OrderItem_productId_fkey")
  @@index([variantId], map: "OrderItem_variantId_fkey")
}

model payment {
  id        Int            @id @default(autoincrement())
  orderId   Int
  amount    Float
  method    payment_method
  status    payment_status @default(PENDING)
  createdAt DateTime       @default(now())
  isDeleted Boolean        @default(false)
  order     order          @relation(fields: [orderId], references: [id], map: "Payment_orderId_fkey")

  @@index([orderId], map: "Payment_orderId_fkey")
}

model product {
  id            Int             @id @default(autoincrement())
  name          String
  price         Float
  description   String
  stock         Int?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime
  categoryId    Int
  isActive      Boolean         @default(true)
  isDeleted     Boolean         @default(false)
  orderId       Int             @default(0)
  cartitem      cartitem[]
  couponproduct couponproduct[]
  customization customization[]
  orderitem     orderitem[]
  category      category        @relation(fields: [categoryId], references: [id], onDelete: Cascade, map: "Product_categoryId_fkey")
  productimage  productimage[]
  variants      variant[]
  wishlist      wishlist[]

  @@index([categoryId], map: "Product_categoryId_fkey")
}

model productimage {
  id        Int     @id @default(autoincrement())
  productId Int
  url       String
  altText   String?
  products  product @relation(fields: [productId], references: [id], map: "ProductImage_productId_fkey")

  @@index([productId], map: "ProductImage_productId_fkey")
}

model user {
  id               Int                @id @default(autoincrement())
  name             String
  email            String             @unique(map: "User_email_key")
  password         String?
  role             user_role          @default(CUSTOMER)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  isDeleted        Boolean            @default(false)
  googleId         String?            @unique(map: "User_googleId_key")
  phone            String?
  profileComplete  Boolean            @default(false)
  provider         String             @default("local")
  profileImage     String?
  activitylog      activitylog[]
  addresses          address[]
  cart             cart[]
  couponredemption couponredemption[]
  customization    customization[]
  notification     notification[]
  order            order[]
  wishlist         wishlist[]
}

model variant {
  id         Int         @id @default(autoincrement())
  productId  Int
  sku        String
  attributes Json
  stock      Int
  price      Float
  isDeleted  Boolean     @default(false)
  cartitem   cartitem[]
  orderitem  orderitem[]
  products   product     @relation(fields: [productId], references: [id], map: "Variant_productId_fkey")

  @@unique([productId, sku], map: "Variant_productId_sku_key")
}

model wishlist {
  id             Int      @id @default(autoincrement())
  userId         Int
  productId      Int
  createdAt      DateTime @default(now())
  lastKnownPrice Float?
  products       product  @relation(fields: [productId], references: [id], map: "Wishlist_productId_fkey")
  user           user     @relation(fields: [userId], references: [id], map: "Wishlist_userId_fkey")

  @@index([productId], map: "Wishlist_productId_fkey")
  @@index([userId], map: "Wishlist_userId_fkey")
}

enum coupon_discountType {
  PERCENTAGE
  FIXED
}

enum order_status {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
}

enum payment_method {
  CARD
  PAYSTACK
  FLUTTERWAVE
  BANK_TRANSFER
  USSD
}

enum payment_status {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum user_role {
  ADMIN
  CUSTOMER
}

enum coupon_type {
  ADMIN
  AUTO_REWARD
}
